// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.15;

import "forge-std/Test.sol";

import {NFTEnhancement} from "src/NFTEnhancement.sol";
import {Glitch} from "src/renderers/Glitch.sol";
import {ERC721} from "src/ERC721.sol";

contract NFTEnhancementTest is Test {
    NFTEnhancement public enhancement;
    address public constant alice = address(0xABCD);
    string internal constant tokenName = "GLITCH";
    address internal renderer;
    uint96 internal constant tokenQualifier = 0;
    uint256 internal tokenId;

    address internal constant BAYC =
        address(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D);
    address internal constant underlyingTokenContract = BAYC;
    uint256 internal constant underlyingTokenId = 1234;

    function setUp() public {
        enhancement = new NFTEnhancement("NFT Filters", "FLTRS");
        renderer = address(new Glitch());
        tokenId = enhancement.composeTokenId(renderer, tokenQualifier);
    }

    function testMint() public {
        address recipient = address(this);
        enhancement.mint(recipient, renderer, tokenQualifier, tokenName);

        assertEq(enhancement.ownerOf(tokenId), recipient);
    }

    function testMintAuthorizedOnly() public {
        address recipient = address(this);

        vm.startPrank(alice);
        vm.expectRevert(ERC721.Unauthorized.selector);
        enhancement.mint(recipient, renderer, tokenQualifier, tokenName);
        vm.stopPrank();
    }

    function testSetUnderlyingToken() public {
        address recipient = address(this);
        enhancement.mint(recipient, renderer, tokenQualifier, tokenName);

        enhancement.setUnderlyingToken(
            tokenId, underlyingTokenContract, underlyingTokenId
        );

        (address _underlyingTokenContract, uint256 _underlyingTokenId) =
            enhancement.getUnderlyingToken(tokenId);
        assertEq(_underlyingTokenContract, underlyingTokenContract);
        assertEq(_underlyingTokenId, underlyingTokenId);
    }

    function testSetUnderlyingTokenAuthorizedOnly() public {
        address recipient = address(alice);
        enhancement.mint(recipient, renderer, tokenQualifier, tokenName);

        vm.expectRevert(ERC721.Unauthorized.selector);
        enhancement.setUnderlyingToken(
            tokenId, underlyingTokenContract, underlyingTokenId
        );
        vm.stopPrank();
    }

    function testTokenURI() public {
        address recipient = address(this);
        enhancement.mint(recipient, renderer, tokenQualifier, tokenName);

        enhancement.setUnderlyingToken(
            tokenId, underlyingTokenContract, underlyingTokenId
        );

        string memory tokenURI = enhancement.tokenURI(tokenId);
        string memory metadata =
            "data:application/json;base64,";
        assertEq(tokenURI, metadata);

        tokenURI = enhancement.previewTokenURI(
            tokenId, underlyingTokenContract, underlyingTokenId
        );
        assertEq(tokenURI, metadata);
    }
}